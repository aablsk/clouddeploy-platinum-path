#!/bin/bash

# This was born to troubleshoot the solution1 since I learnt it Does NOT work in MC setuip but only in sc.
# So at the end of July I started fixing it but then I went OOO before finalizing it, so I'm redoing EVERYTHING
# It was SOL1. Then before vacay I renamed SOL1C, then i came back thinking SOL1D was wrong so i moved it to SOL1A.
# Then I re4alized sol1c was the right hing, but to make sure everything is migrated correctly I'm now moving everything
# to "sol1sc" (Single Cluster). It works this way:
# - called "sol1sc"
# - single cluster: `cicd-dev``
# + two stages:
#   - dev     (ns: cicd-dev)
#   - staging (ns: default)

# SOL1A and SOL1D are BAD. Also service/kubernetes is quite useless.
BAD_SOL1_REGEX="sol1a|sol1d|service/kubernetes"

# app01 35.190.75.32 34.111.78.196
# app02: 34.110.176.245 //34.102.192.192/
# 34.117.113.218 is app01 XWG :)
#for IP in 35.190.75.32 34.111.78.196 34.110.176.245 34.117.113.218 ; do

source ./.env.sh || exit 42

function _curl_http_code() {
    curl --write-out "[_curl_http_code] %{http_code}  $*\n" --silent --output /dev/null "$@" |
        bin/rcg "200" GREEN |
        bin/rcg "404" RED |
        bin/rcg "000" RED |
        bin/rcg "502" RED |
        bin/rcg "500" RED
}

GATEWAY_REGEX="ext-gw"

function _egrep_ipaddress() {
    grep -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'
}
#bin/kubectl-canary-and-prod get gateway | grep "sol1-app0" | grep "$GATEWAY_REGEX" | awk '{print $1 " " $2 " " $4}' |
bin/kubectl-dev get gateway | egrep -v "$BAD_SOL1_REGEX"

echo "Now iterating through Gateways with IP address :)"
bin/kubectl-dev get gateway | egrep -v "$BAD_SOL1_REGEX" | _egrep_ipaddress | grep "sol1sc" | grep "$GATEWAY_REGEX" | awk '{print $1 " " $2 " " $4}' |
    while read ENV GATEWAY IP ; do

    echo == [$ENV] Riccardo manual/boring checks on GATEWAY=$GATEWAY IP=$IP ==
    #_curl_http_code  http://$IP/
    _curl_http_code  http://$IP/statusz
    #_curl_http_code -H "host: passepartout.example.io" http://$IP/
    _curl_http_code -H "host: sol-passepartout.example.io" http://$IP/statusz
    _curl_http_code -H "host: www.example.io"              http://$IP/statusz
    # These are still failing..
    #_curl_http_code -H "host: passepartout.example.io"      http://$IP/_justprod/
    #_curl_http_code -H "host: sol1-passepartout.example.io" http://$IP/_justcanary/

    # if i works, statusz is single line by construction :)
    # TODO: oly do if the original curl of http://$IP/ works.
    #curl -s -H "host: passepartout.example.io" http://$IP/statusz 2>/dev/null | head -1
    echo

done

bin/kubectl-dev     get service,deployment,gateway,httproute | egrep -v "$BAD_SOL1_REGEX"
bin/kubectl-staging get service,deployment,gateway,httproute | egrep -v "$BAD_SOL1_REGEX"

yellow Iterating now the False Gateways:
bin/kubectl-dev get gateway | grep sol1sc | grep False..
# for each FAlse do...
#bin/kubectl-dev describe  gateway sol1sc-app01-eu-w1-ext-gw
bin/kubectl-dev get gateway | grep sol1sc | grep False | while read ENV GATEWAY_NAME CLASS FALSE TIME ; do
    red "Investingaitng why $GATEWAY_NAME fails../"
#    bin/kubectl-dev  describe gateway
    _kubectl_on_dev  describe gateway "$GATEWAY_NAME"
done

yellow 'Crazy idea. Getting 2 existing pods in "ns:cicd-dev" dev stuff and move them to default namespace (staging)'

mkdir -p k8s/solution1-GatewayAPI-pod-scaling-GXLB/tmp/
if /bin/false ; then
    # Cluster:DEV Stage:DEV for APP01
    kubectl --context="$GKE_DEV_CLUSTER_CONTEXT" --namespace cicd-dev get deployments.apps app01-kupython -o yaml > \
        k8s/solution1-GatewayAPI-pod-scaling-GXLB/tmp/app01-kupython.deployment.yaml|
            sed -e 's/name: app01-kupython/name: app01-kupython-tmp-sol1sc/'
    # Cluster:DEV Stage:DEV for APP02
    kubectl --context="$GKE_DEV_CLUSTER_CONTEXT" --namespace cicd-dev  get deployments.apps app02-kuruby -o yaml > \
        k8s/solution1-GatewayAPI-pod-scaling-GXLB/tmp/app02-kuruby.deployment.yaml |
            sed -e 's/name: app02-kuruby/name: app02-kuruby-tmp-sol1sc/'
    # Note that Stage:STAGING is missing here.
    # TODO add staging
fi

# no cicd-dev this time but BASE namespace :)

#echo "This is the static stuff from Daniel manually imported from another project (002)"
#kubectl --context="$GKE_DEV_CLUSTER_CONTEXT" apply -f  k8s/solution1-GatewayAPI-pod-scaling-GXLB/tmp/
